#!/bin/bash

# SSF Hub - Google Cloud Platform Setup Script
# This script sets up the required GCP resources for the SSF Hub service

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print functions
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if gcloud is installed
if ! command -v gcloud &> /dev/null; then
    print_error "gcloud CLI is not installed. Please install it first:"
    print_error "https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Get project ID from user or use current config
if [ -z "$PROJECT_ID" ]; then
    CURRENT_PROJECT=$(gcloud config get-value project 2>/dev/null || echo "")
    if [ -n "$CURRENT_PROJECT" ]; then
        read -p "Use current project ($CURRENT_PROJECT)? [Y/n]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            read -p "Enter GCP Project ID: " PROJECT_ID
        else
            PROJECT_ID=$CURRENT_PROJECT
        fi
    else
        read -p "Enter GCP Project ID: " PROJECT_ID
    fi
fi

if [ -z "$PROJECT_ID" ]; then
    print_error "Project ID is required"
    exit 1
fi

print_info "Setting up SSF Hub for project: $PROJECT_ID"

# Set project
print_info "Setting project configuration..."
gcloud config set project $PROJECT_ID

# Enable required APIs
print_info "Enabling required Google Cloud APIs..."
gcloud services enable pubsub.googleapis.com
gcloud services enable container.googleapis.com
gcloud services enable iam.googleapis.com

print_info "APIs enabled successfully"

# Create service account
SERVICE_ACCOUNT_NAME="ssf-hub"
SERVICE_ACCOUNT_EMAIL="$SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com"

print_info "Creating service account: $SERVICE_ACCOUNT_NAME"

# Check if service account already exists
if gcloud iam service-accounts describe $SERVICE_ACCOUNT_EMAIL &>/dev/null; then
    print_warn "Service account $SERVICE_ACCOUNT_NAME already exists, skipping creation"
else
    gcloud iam service-accounts create $SERVICE_ACCOUNT_NAME \
        --display-name="SSF Hub Service Account" \
        --description="Service account for SSF Hub to access Pub/Sub"
    print_info "Service account created: $SERVICE_ACCOUNT_EMAIL"
fi

# Grant Pub/Sub permissions
print_info "Granting Pub/Sub permissions to service account..."
gcloud projects add-iam-policy-binding $PROJECT_ID \
    --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    --role="roles/pubsub.admin"

gcloud projects add-iam-policy-binding $PROJECT_ID \
    --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    --role="roles/pubsub.editor"

print_info "Permissions granted successfully"

# Create service account key
KEY_FILE="./service-account-key.json"
if [ -f "$KEY_FILE" ]; then
    read -p "Service account key file already exists. Overwrite? [y/N]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Skipping key creation"
        KEY_FILE=""
    fi
fi

if [ -n "$KEY_FILE" ]; then
    print_info "Creating and downloading service account key..."
    gcloud iam service-accounts keys create $KEY_FILE \
        --iam-account=$SERVICE_ACCOUNT_EMAIL
    print_info "Service account key saved to: $KEY_FILE"
fi

# Create Pub/Sub topics (optional - the hub will create them automatically)
print_info "Setting up Pub/Sub topics..."

TOPICS=(
    "ssf-events-session-revoked"
    "ssf-events-credential-change"
    "ssf-events-device-compliance-change"
    "ssf-events-account-disabled"
    "ssf-events-account-purged"
    "ssf-events-identifier-changed"
    "ssf-events-identifier-recycled"
    "ssf-events-assurance-level-change"
    "ssf-events-recovery-activated"
    "ssf-events-recovery-information-changed"
    "ssf-events-token-claims-change"
)

for topic in "${TOPICS[@]}"; do
    if gcloud pubsub topics describe $topic &>/dev/null; then
        print_warn "Topic $topic already exists, skipping"
    else
        gcloud pubsub topics create $topic
        print_info "Created topic: $topic"
    fi
done

# Generate environment configuration
print_info "Generating environment configuration..."

cat > .env << EOF
# SSF Hub Environment Configuration
# Generated by setup-gcp.sh on $(date)

# Google Cloud Configuration
GCP_PROJECT_ID=$PROJECT_ID
GOOGLE_APPLICATION_CREDENTIALS=./service-account-key.json

# Pub/Sub Configuration
PUBSUB_TOPIC_PREFIX=ssf-events

# Server Configuration
SERVER_PORT=8080
LOG_LEVEL=info

# Authentication (CHANGE THIS IN PRODUCTION!)
JWT_SECRET=$(openssl rand -hex 32)

# Set to true in production
REQUIRE_AUTH=false

EOF

print_info "Environment file created: .env"

# Print summary
echo
print_info "=== GCP Setup Complete ==="
echo "Project ID: $PROJECT_ID"
echo "Service Account: $SERVICE_ACCOUNT_EMAIL"
echo "Key File: ${KEY_FILE:-"(not created)"}"
echo "Environment File: .env"
echo
print_warn "Next Steps:"
echo "1. Review and update .env file for your environment"
echo "2. In production, set REQUIRE_AUTH=true and configure proper JWT_SECRET"
echo "3. Deploy the SSF Hub using: kubectl apply -f deployments/kubernetes/"
echo "4. Update deployment.yaml with your container registry and project ID"
echo
print_info "Setup completed successfully!"